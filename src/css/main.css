/* ======================= *\
   All the CSS for kizu.ru
\* ======================= */

/*

  1. All the `@font-face` for the fonts alongside `@import` of the counter.
     TODO: keep only the font for headers & use default ones for everything else?
  2. All the basic variables on `:root` alongside the only media query.
  3. “Theme” variables: colors etc.
     FIXME: contains non-variables while it shouldn't.
  4. Styles for the highlighted CSS got from prism.js.
*/

@import url("_fonts.css");  /* [1] */
@import url("_config.css"); /* [2] */
@import url("_theme.css");  /* [3] */
@import url("_prism.css");  /* [4] */

/*
  1. Prevents the different widths when there is not enough content to create a scroll.
     FIXME: replace with calc padding.
*/

html {
  overflow-y: scroll; /* [1] */
  font-size: var(--THEME_ROOT_FONT_SIZE);
  background: var(--THEME_BG);
}

body {
  /* Default context */
  position: relative;
  z-index: 1;

  /* Default flex layout */
  display: flex;
  flex-direction: column;

  /* is it used anywhere else? */
  min-width: var(--content-min-width);

  /* Reset */
  margin: 0;

  /* For subgrid substitute */
  counter-reset: asides 9;

  /* Should this be a part of utility definition? */
  font: var(--THEME_FONT);
}

header {
  /* For subgrid substitute */
  order: -1;

  /* FIXME: use utility */
  text-align: center;

  /* Utility usage */
  --h1-font-size: 3.5rem;
  --h1-font-weight: normal;
  --ul-item-content: none;
  --list-item-padding: 0;
}

/* For subgrid substitute */
header::after {
  content: counter(asides);
  grid-column: aside;

  line-height: var(--aside-width);
  writing-mode: vertical-lr;
  word-wrap: break-word;

  height: 0;
  visibility: hidden;
  margin-left: calc(-1 * var(--aside-width));
  max-width: calc(2 * var(--aside-width));
}


/* Grid stuff start */
header,
main {
  display: grid;
  grid-template: var(--grid);
  grid-gap: 0 var(--h-gap);
  --grid-column: content;
}

* {
  grid-column: var(--grid-column);
}

figure {
  /* Here I'd like to _use_ variable, but prevent it from being passed down */
  grid-column: content;
  --grid-column: initial;
}
/* Grid stuff end */

ul {
  /* Utility definition */
  display: var(--ul-display);
  justify-content: var(--ul-justify-content);
}

nav {
  /* Utility usage */
  --ul-display: flex;
  --ul-justify-content: space-between;
}

time {
  /* FIXME: replace with utility? */
  font-size: var(--THEME_FONT_SIZE--SMALL);

  --color-a: 0.75;
}

/* Typography basics, kinda reset stuff? */
html {
  -webkit-hyphens: auto;
  hyphens: auto;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  text-size-adjust: 100%;

  text-rendering: optimizelegibility;
  -webkit-font-smoothing: subpixel-antialiased;

  cursor: default;
}

main {
  /* FIXME: use utility? or do we need justify there at all? */
  text-align: justify;
}

img {
  max-width: 100%;
  border: none;
  display: var(--img-display, inline-block);
  margin: var(--img-margin, 0);
}

img:only-child {
  --img-display: block;
  --img-margin: 1rem auto;
}

/* Headers */
h1, h2, h3, h4, h5, h6 {
  margin-top: 1rem;
  margin-bottom: 1rem;
  text-align: center;
  font-size: 1rem;
  line-height: 1em;
  font-weight: 900;
}

h1 {
  font-size: var(--h1-font-size, 3rem);
  font-weight: var(--h1-font-weight, 900);
}

h2 {
  font-size: 2rem
}

h3 {
  font-size: 1.5rem;
  line-height: 2rem;
}


hr {
  visibility: hidden;
}

p {
  margin: 0;
  margin-top: var(--p-margin-top);
  text-indent: var(--p-text-indent);
}

p:empty {
  display: none;
}

/* That's the only type of combinator which is allowed I guess */
p + p,
p + aside + p {
  --p-text-indent: var(--text-indent);
  --p-margin-top: var(--p-p-margin-top);
}

ul, ol {
  padding: 0 0 0 var(--THEME_INDENT);
}

aside {
  --grid-column: aside;
  grid-row-end: span var(--span);
  align-self: var(--align, start);

  width: var(--aside-width); /* There was min-width — why not just width? */
  margin-left: var(--initial-at-large, auto);

  counter-increment: asides;

  text-align: left;
  font: var(--THEME_FONT--SMALL);
  font-feature-settings: "lnum", "onum" 0;
  padding-top: 0.375em;
  margin-top: calc(2rem * (var(--at-large) * var(--offset, 0) + var(--at-small) * 1));
  --text-indent: 0;
  --p-p-margin-top: 1.5em;
  --link-underline-offset: 0.5em;
}

aside[style*='--align:end;'] {
  padding-top: 0;
  padding-bottom: 0.375em;
}

blockquote {
  padding: var(--v-gap) var(--THEME_INDENT);
  font-style: italic;
  text-align: left;
  --text-indent: 0;
}

code,
pre,
kbd {
  font-feature-settings: "lnum", "onum" 0;
}

pre {
  white-space: pre-wrap;
  font-family: Monaco, Consolas, monospace, monospace;
  --code-font-style: normal;
  --code-line-height: 1.5rem;
  font-size: var(--THEME_FONT_SIZE--CODE);
  line-height: 1;

  position: relative;

  overflow: hidden;

  padding: 1rem 0;

  text-align: left;

  --code-color: currentColor;

  border-radius: 3px;
}

/* TODO: move to external import, like an escape hatch */
pre:not(.z):not(.z) {
  background: #FFF; /* Overrides prism.js one */
}

code {
  font: inherit;
  font-style: var(--code-font-style, italic);
  line-height: var(--code-line-height, 1);
  color: var(--code-color, #690);
  hyphens: none;
}

/* Handling fancy first letters */
/* Not ::first-letter as there are some problems with it in some browsers */
.FirstLetter {
  margin-left: var(--fletter-offset, -0.15em);
  font-feature-settings: var(--fletter-style, "ss01");
}

[aria-label^='C'],
[aria-label^='С'],
[aria-label^='Э'] {
  --fletter-style: "ss02";
  --fletter-offset: -0.05em;
}
[aria-label^='К'],
[aria-label^='Т'] {
  --fletter-style: "ss04";
}

[aria-label^='Ч'] {
  --fletter-offset: -0.2em;
}

[aria-label^='А'],
[aria-label^='A'],
[aria-label^='Ф'],
[aria-label^='Д'],
[aria-label^='З'],
[aria-label^='О'],
[aria-label^='O'],
[aria-label^='Ж'],
[aria-label^='Я'],
[aria-label^='Q'],
[aria-label^='S'],
[aria-label^='G'],
[aria-label^='Z'] {
  --fletter-offset: -0.05em;
}

/* Kerning is not applied there, need to do manually */
[aria-label^='Va'] {
  --fletter-offset: -0.11em;
}



main {
  counter-reset: sidenote sidenote-link;
}

/* Sidenotes stuff */
.Sidenote,
.Sidelink {
  position: relative;
  z-index: 1;

  display: inline-block;
  text-indent: 0;
  --link-text-shadow: none;
}

.Highlight {
  position: absolute;
  top: 0;
  left: 0;
  z-index: -2;

  width: 100%;
  height: 100%;

  transition: background-color 0.2s 0.2s linear;
  counter-increment: var(--counter);
}

.Sidenote:not(:hover),
.Sidelink:not(:hover) {
  --highlight-hover: rgba(255, 255, 0, 0.3);
}

.Highlight:hover {
  background: var(--highlight-hover);
}

label[for$=-Anchor] {
  display: block;
}

.Sidelink {
  --counter: sidenote-link;
  --link-underline-color: transparent;
  --link-underline-color--hover: transparent;
}

a[aria-hidden=true]:not([class]) {
  /* Maybe just reset lol? */
  display: inline;
  color: inherit;
  text-decoration: none;
}

a[href^='#'][aria-hidden=true]:not([class])::after {
  content: counter(sidenote-link);

  position: relative;
  top: -0.555rem;

  cursor: pointer;

  padding: 0 0.16em;

  font-size: 1rem;
  line-height: 1;

  color: rgba(0,0,0, 0.6);

  font-feature-settings: "smcp";
}

.Sidenote {
  --counter: sidenote;
}

label[for$=-Anchor] {
  padding-right: var(--h-gap);
}

.Highlight[id$=-Content]::before {
  content: counter(sidenote) ". ";

  position: absolute;
  left: -1.25rem;

  width: 1rem;

  text-align: right;
  color: rgba(0,0,0, 0.6);
  transition: opacity 0.2s 0.2s linear;

  opacity: var(--highlight-opacity, calc(1 - var(--at-large)));
}

.Highlight[id$=-Content]:hover,
.Sidenote:hover {
  --highlight-opacity: 1;
}


/* Links */
:root {
  --link-underline-width: 1px;
  --link-underline-offset: 0.37em;
  --link-underline-color: hsla(
    var(--THEME_COLOR_H),
    var(--THEME_COLOR_S--P),
    var(--THEME_COLOR_L--P),
    var(--THEME_COLOR_A--LIGHT)
  );
  --link-underline-color--hover: currentColor;
  --link-text-shadow:
    -2px 0 0 var(--THEME_BG),
    2px 0 0 var(--THEME_BG),
    -1px 0 var(--THEME_BG),
    1px  0 var(--THEME_BG),
    0 -1px var(--THEME_BG),
    0 -2px var(--THEME_BG),
    0 -3px var(--THEME_BG),
    0 -4px var(--THEME_BG),
    0 -5px var(--THEME_BG),
    0 -6px var(--THEME_BG);
}

a:link {
  color: var(--THEME_LINK);

  text-decoration: none;
  --underline-width: var(--link-underline-width);
  background:
    linear-gradient(var(--link-underline-color), var(--link-underline-color))
    repeat-x
    0 calc(50% + var(--link-underline-offset))/16px
    var(--underline-width);
  text-shadow: var(--link-text-shadow);
}

a:hover {
  --underline-width: calc(2 * var(--link-underline-width));
  --link-underline-color: var(--link-underline-color--hover);
}

a:visited {
  color: var(--THEME_VISITED);
}


/* Wrapper is needed to fix strange IE10+ bugs with text-shadow */
/* TODO: I think there was a way to do this in reverse, like in normalize? */
@media screen {
  @media (min-width: 0px) {
    html {
      text-shadow: var(--THEME_TEXT_SHADOW);
    }
  }
}


::selection {
  text-shadow: none !important;
  background-color: var(--THEME_SELECTION);
}

/* More precise color control etc. */
* {
  color: hsla(
    var(--color-h, 0),
    calc(var(--color-s, 0) * 1%),
    calc(var(--color-l, 0) * 1%),
    calc(var(--inherited-a, var(--color-a, 1)) + 0 / (1 - var(--color-a, 1)))
  );
  --color-a: 1;
}

:root {
  --color-h: var(THEME_COLOR_H);
  --color-s: var(THEME_COLOR_S);
  --color-l: var(THEME_COLOR_L);
  --color-a: var(THEME_COLOR_A);

  --inherit-custom-color: 0;
  --inherited-a: initial;
}


/* Lists */

:root {
  --ul-item-content: var(--THEME_LI_CONTENT);
  --ol-item-content: var(--THEME_LI_CONTENT--OL);
  --list-item-padding: var(--THEME_INDENT);
}

ol, ul {
  padding: 0;
  --list-item-content: var(--ul-item-content);
}

ol {
  counter-reset: list;
  --list-item-content: var(--ol-item-content);
}

li {
  --p-margin-top: 1rem;

  padding: 0 0 0 var(--list-item-padding);
  text-align: left;
  list-style-type: none; /* Fixme: screenreaders would die out? */
}

li::before {
  content: var(--list-item-content);
  counter-increment: list;

  position: absolute;

  width: var(--THEME_INDENT);
  margin-left: calc(-1*var(--THEME_INDENT));

  text-align: left;
  font-feature-settings: "lnum", "onum" 0;
}
